using DataStructures
using NumericalDataManipulation.CommonMath

function piecewise_function(
  definitions::OrderedDict{Tuple{Float64, Float64}, Tuple{Function, Bool}}; œµ·µá·µñ::Float64=1e-2)
  @assert all(d -> d.first[1] < d.first[2], definitions)
  keypoints = flatten(keys(definitions))
  @assert issorted(keypoints)
  inf_point_pos = sort(findall(keypoint -> abs(keypoint) == Inf, keypoints))
  @assert length(inf_point_pos) ‚â§ 2
  @assert all(pos -> pos ‚àà [1, length(keypoints)], inf_point_pos)
  @assert ifelse(length(inf_point_pos) == 2, keypoints[1] == -Inf, true)
  @assert ifelse(length(inf_point_pos) == 2, keypoints[end] == Inf, true)
  @assert ifelse(length(inf_point_pos) == 1 && inf_point_pos[1] == 1, keypoints[1] == -Inf, true)
  @assert ifelse(length(inf_point_pos) == 1 && inf_point_pos[1] == length(keypoints), keypoints[end] == Inf, true)
  @assert ifelse(length(inf_point_pos) == 0, abs(keypoints[1]) ‚â† Inf, true)
  @assert ifelse(length(inf_point_pos) == 0, abs(keypoints[end]) ‚â† Inf, true)

  lfuncs = map(d -> d.first[2] => d.second, collect(definitions)[1:end-1])
  rfuncs = map(d -> d.first[1] => d.second, collect(definitions)[2:end])
  @assert length(lfuncs) == length(rfuncs)
  N‚Çö = length(lfuncs)
  point_pair_funcs = Vector{Pair{Tuple{Float64,Float64}, Tuple{Tuple{Function, Bool},Tuple{Function, Bool}}}}()
  for k = 1:N‚Çö
    ppf = (lfuncs[k].first, rfuncs[k].first) => (lfuncs[k].second, rfuncs[k].second)
    push!(point_pair_funcs, ppf)
  end
  @assert all(ppf -> abs(ppf.first[1]) ‚â† Inf, point_pair_funcs)
  @assert all(ppf -> abs(ppf.first[2]) ‚â† Inf, point_pair_funcs)
  @assert all(ppf -> abs(ppf.first[1] - ppf.first[2]) ‚â§ œµ·µá·µñ, point_pair_funcs)
  breakpoint_funcs = map(ppf -> (ppf.first[1] + ppf.first[2]) / 2 => ppf.second, point_pair_funcs)
  breakpoint_func_gaps = map(bf -> bf.first => (bf.second[2][1](bf.first + œµ·µá·µñ) - bf.second[1][1](bf.first - œµ·µá·µñ), bf.second[1][2], bf.second[2][2]), breakpoint_funcs)
  @assert length(breakpoint_funcs) == length(breakpoint_func_gaps)
  breakpoint_parameters = map(
  bp_entry -> begin
      k = bp_entry[1]
      func_pars = bp_entry[2]
      func_gap = func_pars.second[1]
      keep_left = func_pars.second[2]
      keep_right = func_pars.second[3]
      Œîy = func_gap; Œîx = abs(ùêÜ * Œîy)
      Œîx = Œîx ‚â• œµ·µá·µñ ? Œîx : œµ·µá·µñ
      x‚ÇÄ = func_pars.first
      f1 = breakpoint_funcs[k].second[1][1]
      f2 = breakpoint_funcs[k].second[2][1]
      # @assert typeof(f1) == Function
      # @assert typeof(f2) == Function
      return (x‚ÇÄ, Œîx, Œîy, (f1, f2), keep_left, keep_right)
    end,
    enumerate(breakpoint_func_gaps))
  return make_piecewise_sigmoid_function(definitions, breakpoint_funcs, breakpoint_parameters)
end

function make_piecewise_sigmoid_function(
  definitions::OrderedDict{Tuple{Float64, Float64},Tuple{Function, Bool}},
  breakpoint_funcs, breakpoint_parameters;
  œµ·µá·µñ::Float64=1e-2)
  @assert length(definitions) ‚â• 2

  breakpoints = Vector{Float64}(undef, 0)
  functions = Vector{Function}(undef, 0)
  definition_list = collect(definitions)
  for k = 1:length(definition_list)-1
    def‚Çñ_left = definition_list[k]
    x‚Çñ_a_left = def‚Çñ_left.first[1]; x‚Çñ_b_left = def‚Çñ_left.first[2]
    @assert x‚Çñ_a_left < x‚Çñ_b_left
    @assert ifelse(x‚Çñ_a_left == -Inf, k == 1, true)
    keep_left‚Çñ = def‚Çñ_left.second[2]
    Œîx‚Çñ_left = x‚Çñ_b_left - x‚Çñ_a_left
    if keep_left‚Çñ
      @warn "Interval [$x‚Çñ_a_left, $x‚Çñ_b_left] will be kept (untouched function)."
    end

    def‚Çñ_right = definition_list[k + 1]
    x‚Çñ_a_right = def‚Çñ_right.first[1]; x‚Çñ_b_right = def‚Çñ_right.first[2]
    @assert x‚Çñ_a_right < x‚Çñ_b_right
    @assert ifelse(x‚Çñ_b_right == Inf, k + 1 == length(definition_list), true)
    keep_right‚Çñ = def‚Çñ_right.second[2]
    Œîx‚Çñ_right = x‚Çñ_b_right - x‚Çñ_a_right
    if keep_right‚Çñ
      @warn "Interval [$x‚Çñ_a_right, $x‚Çñ_b_right] will be kept (untouched function)."
    end

    parameters‚Çñ = breakpoint_parameters[k]
    x‚ÇÄ‚Çñ = parameters‚Çñ[1]
    Œîx‚Çõ = parameters‚Çñ[2]
    Œîy‚Çõ = parameters‚Çñ[3]
    f1, f2 = parameters‚Çñ[4]
    kf1 = parameters‚Çñ[5]
    kf2 = parameters‚Çñ[6]
    @assert kf1 == keep_left‚Çñ
    @assert kf2 == keep_right‚Çñ

    Œ¥x‚Çñ_left = ifelse(x‚Çñ_a_left == -Inf,
      10 * ùêÜ * Œîx‚Çõ,
      ifelse(ùêÜ‚Åª¬π * Œîx‚Çõ < Œîx‚Çñ_left, ùêÜ‚Åª¬π * Œîx‚Çõ/œÄ, ùêÜ1‚Åª¬π * Œîx‚Çñ_left / 2))

    Œ¥x‚Çñ_right = ifelse(x‚Çñ_b_right == Inf,
      10 * ùêÜ * Œîx‚Çõ,
      ifelse(ùêÜ‚Åª¬π * Œîx‚Çõ < Œîx‚Çñ_right, ùêÜ‚Åª¬π * Œîx‚Çõ/œÄ, ùêÜ1‚Åª¬π * Œîx‚Çñ_right / 2))
    #@assert(Œ¥x‚Çñ_left ‚â• ùêÜ‚Åª¬π * Œîx‚Çõ / 2, "Œ¥x‚Çñ_left ‚â• ùêÜ‚Åª¬πŒîx‚Çõ/2: Œ¥x‚Çñ_left = $(Œ¥x‚Çñ_left), ùêÜ‚Åª¬πŒîx‚Çõ/2 = $(ùêÜ‚Åª¬π*Œîx‚Çõ/2)")
    #@assert(Œ¥x‚Çñ_right ‚â• ùêÜ‚Åª¬π * Œîx‚Çõ / 2, "Œ¥x‚Çñ_right ‚â• ùêÜ‚Åª¬πŒîx‚Çõ/2: Œ¥x‚Çñ_right = $(Œ¥x‚Çñ_right),  ùêÜ‚Åª¬πŒîx‚Çõ/2 = $(ùêÜ‚Åª¬π*Œîx‚Çõ/2)")

    Œ± = 0.2 * (Œ¥x‚Çñ_left + Œ¥x‚Çñ_right)
    Œ¥x‚Çñ_left_new = keep_left‚Çñ ? Œ¥x‚Çñ_left / 100.0 : Œ¥x‚Çñ_left
    Œ¥x‚Çñ_right_new = keep_right‚Çñ ? Œ¥x‚Çñ_right / 100.0 : Œ¥x‚Çñ_right
    if Œ¥x‚Çñ_left_new < Œ¥x‚Çñ_left
      x‚ÇÄ‚Çñ = x‚ÇÄ‚Çñ + Œ¥x‚Çñ_left - Œ¥x‚Çñ_left_new
    end
    if Œ¥x‚Çñ_right_new < Œ¥x‚Çñ_right
      x‚ÇÄ‚Çñ = x‚ÇÄ‚Çñ - Œ¥x‚Çñ_right + Œ¥x‚Çñ_right_new
    end
    @info "Blending function $f1; $f2; $x‚ÇÄ‚Çñ; $Œ±"
    blending_function‚Çñ = sigmoid_of_name(f1, f2, x‚ÇÄ‚Çñ, Œ±, "")

    breakpoint_left = x‚ÇÄ‚Çñ - Œ¥x‚Çñ_left_new
    breakpoint_right = x‚ÇÄ‚Çñ + Œ¥x‚Çñ_right_new
    function_left = def‚Çñ_left.second[1]
    function_middle = blending_function‚Çñ
    function_right = def‚Çñ_right.second[1]

    @info "Made blending function in interval:
    [$(breakpoint_left), $(breakpoint_right)],
    Œ± = $Œ±, x‚ÇÄ‚Çñ = $x‚ÇÄ‚Çñ, Œ¥x‚Çñ_left = $Œ¥x‚Çñ_left_new, Œ¥x‚Çñ_right = $Œ¥x‚Çñ_right_new,
    keep_left‚Çñ = $keep_left‚Çñ, keep_right‚Çñ = $keep_right‚Çñ,
    Œ¥x‚Çñ_left_old = $Œ¥x‚Çñ_left, Œ¥x‚Çñ_right_old = $Œ¥x‚Çñ_right"

    push!(functions, function_left)
    push!(breakpoints, breakpoint_left)
    push!(functions, function_middle)
    push!(breakpoints, breakpoint_right)
    if k + 1 == length(definition_list)
      push!(functions, function_right)
    end
  end
  pwf = make_piecewise_function(breakpoints, functions)
  return pwf, breakpoints
end

function make_piecewise_function(
  breakpoints::Vector{Float64}, functions::Vector{Function})
  pwf(R) = begin
    n·∂† = searchsortedfirst(breakpoints, R)
    f_piecewise = functions[n·∂†]
    return f_piecewise(R)
  end
end

const sigmoid = (x, x‚ÇÄ, Œ±) -> 1/(1 + exp(-(x - x‚ÇÄ)/Œ±))
function sigmoid_of_name(f1::Function, f2::Function, x‚ÇÄ, Œ±, name::AbstractString)
  return x -> begin
    sf = (1 - sigmoid(x, x‚ÇÄ, Œ±))*f1(x) + sigmoid(x, x‚ÇÄ, Œ±)*f2(x)
    if sf === NaN || sf === NaN64 || sf === NaN32 || sf === NaN16
      @error "SIGMOID NaN: x=$x, x‚ÇÄ=$x‚ÇÄ, Œ±=$Œ±, f1(x)=$(f1(x)), f2(x)=$(f2(x)), œÉ(x)=$(sigmoid(x, x‚ÇÄ, Œ±)), name=$name"
    end
    return sf
  end
end
